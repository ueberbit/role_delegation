<?php

/**
 * @file
 *
 * This module allows site administrators to grant some roles the authority to
 * change roles assigned to users, without them needing the 'administer access
 * control' permission.
 *
 * It provides its own tab in the user profile so that roles can be changed
 * without needing access to the user edit form.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\role_delegation\RoleDelegationHelper;
use Drupal\user\Entity;
use Drupal\user\Entity\Role;

/**
 * Implements hook_help().
 */
function role_delegation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page':
      $output = '';
      $output = '<p>' . t('This module allows site administrators to grant some roles the authority to assign selected roles to users, without them needing the <em>administer permissions</em> permission.') . '</p>';
      $output .= '<p>' . t('It provides its own tab in the user profile so that roles can be assigned without needing access to the user edit form.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function role_delegation_theme() {
  return array(
    'role_delegation_delegate_roles_action_form' => array(
      'render element' => 'form',
    ),
  );
};

/**
 * Implements hook_form_alter().
 */
function role_delegation_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  if ($form_id == 'user_register_form' || $form_id == 'user_form') {
    if (\Drupal::currentUser()->hasPermission('administer permissions')) {
      return;
    }
    $form = RoleDelegationHelper::addRoleDelegationElement($form, $form_state->getFormObject()->getEntity());
    $form['#entity_builders'][] = 'role_delegation_update';
  }
  if ($form_id == 'views_form_user_admin_people_page_1') {
    $options = $form['header']['user_bulk_form']['action']['#options'];
    $roles = user_roles(TRUE);
    unset($roles[AccountInterface::AUTHENTICATED_ROLE]);
    unset($roles['administrator']);
    $add_roles = array();
    $remove_roles = array();
    foreach ($options as $option => $label) {
      $operation_rid = explode('-', $option);
      $operation = $operation_rid[0];
      if ($operation == 'role_delegation_add_role') {
        $rid = $operation_rid[1];
        $add_roles[$option] = $roles[$rid];
        unset($option[$option]);
      }
      elseif ($operation == 'role_delegation_remove_role') {
        $rid = $operation_rid[1];
        $remove_roles[$option] = $roles[$rid];
        unset($options[$option]);
      }
    }
    if (count($add_roles)) {
      $form['options']['operation']['#options'] = $options + array(
          t('Add a role to the selected users') => $add_roles,
          t('Remove a role from the selected users') => $remove_roles,
        );
    }
  }
}

/**
 * Entity form builder to update roles to the user.
 */
function role_delegation_update($entity_type, $entity, &$form, FormStateInterface $form_state) {
  if($entity) {
    foreach($form_state->getValue('roles_change') as $rid => $value) {
      if($rid === $value) {
        $entity->addRole($rid);
      }
      if($value === 0) {
        $entity->removeRole($rid);
      }
    }
  }
}

/**
 * Implements hook_e
 */
/**
 * Implements hook_entity_delete().
 */
function role_delegation_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user_role') {
    $permission = "assign {$entity->id()} role";

    $roles = \Drupal::entityQuery('user_role')
      ->condition('permissions.*', $permission)
      ->condition('id', $entity->id(), '<>')
      ->execute();

    foreach (Role::loadMultiple($roles) as $role) {
      $role->revokePermission($permission);
      $role->save();
    }
  }
}
